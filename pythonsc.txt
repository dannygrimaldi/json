import sqlite3

def probar_conexion(ruta_db):
    try:
        # Conectar a la base de datos
        connection = sqlite3.connect(ruta_db)
        print("Conexión establecida exitosamente")

        # Crear un cursor
        cursor = connection.cursor()

        # Crear una tabla de prueba
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS prueba (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL
        )
        ''')
        print("Tabla de prueba creada exitosamente")

        # Insertar un dato de prueba
        cursor.execute('''
        INSERT INTO prueba (nombre) VALUES ('Dato de prueba')
        ''')
        print("Dato de prueba insertado exitosamente")

        # Confirmar los cambios
        connection.commit()

        # Consultar el dato insertado
        cursor.execute('SELECT * FROM prueba')
        filas = cursor.fetchall()
        for fila in filas:
            print(f"Fila recuperada: {fila}")

        # Eliminar la tabla de prueba
        cursor.execute('DROP TABLE IF EXISTS prueba')
        print("Tabla de prueba eliminada exitosamente")

        # Confirmar los cambios
        connection.commit()

    except sqlite3.Error as error:
        print(f"Error al conectar con la base de datos: {error}")

    finally:
        # Cerrar la conexión
        if connection:
            connection.close()
            print("Conexión cerrada exitosamente")



#############################
import sqlite3

def leer_archivo(file_path, tabla):
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    rows = [line.strip().split('|') for line in lines]
    return tabla, rows

def insertar_datos_en_db(db_path, tabla, rows):
    try:
        # Conectar a la base de datos
        connection = sqlite3.connect(db_path)
        cursor = connection.cursor()

        # Borrar los datos existentes de la tabla especificada
        cursor.execute(f'DELETE FROM {tabla}')

        # Insertar los datos
        for row in rows:
            placeholders = ', '.join(['?' for _ in row])
            cursor.execute(f'INSERT INTO {tabla} VALUES ({placeholders})', row)
        print("Datos insertados exitosamente")

        # Confirmar los cambios
        connection.commit()

    except sqlite3.Error as error:
        print(f"Error al insertar datos en la base de datos: {error}")

    finally:
        # Cerrar la conexión
        if connection:
            connection.close()
            print("Conexión cerrada exitosamente")

# Ruta de la base de datos y del archivo de texto
db_path = 'mi_base_de_datos.db'
file_path = 'ruta/al/archivo.txt'
tabla = 'usuarios'  # Nombre de la tabla a modificar

# Leer el archivo y obtener los datos
tabla, rows = leer_archivo(file_path, tabla)

# Insertar los datos en la base de datos
insertar_datos_en_db(db_path, tabla, rows)


# Ruta de la base de datos
ruta_db = 'ruta/a/tu/base_de_datos.db'

# Probar la conexión
probar_conexion(ruta_db)



##############################################
import pyodbc

# Establecer la cadena de conexión para Windows Authentication
server = 'tu_servidor'  # Normalmente, 'localhost' o el nombre de tu máquina
database = 'tu_base_de_datos'
conn_str = f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};Trusted_Connection=yes;'

# Conectar a la base de datos
conexion = pyodbc.connect(conn_str)

# Crear un cursor
cursor = conexion.cursor()

# Ejecutar una consulta
cursor.execute("SELECT * FROM tu_tabla")

# Obtener los resultados de la consulta
resultados = cursor.fetchall()

# Imprimir los resultados
for fila in resultados:
    print(fila)

# Cerrar el cursor y la conexión
cursor.close()
conexion.close()

###########################################################################################

import pyodbc
import csv

# Establecer la cadena de conexión para Windows Authentication
server = 'tu_servidor'  # Normalmente, 'localhost' o el nombre de tu máquina
database = 'tu_base_de_datos'
conn_str = f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};Trusted_Connection=yes;'

# Conectar a la base de datos
conexion = pyodbc.connect(conn_str)

# Crear un cursor
cursor = conexion.cursor()

# Ejecutar una consulta
cursor.execute("SELECT * FROM tu_tabla")

# Obtener los nombres de las columnas
column_names = [desc[0] for desc in cursor.description]

# Obtener los resultados de la consulta
resultados = cursor.fetchall()

# Nombre del archivo CSV
csv_file_name = 'resultados.csv'

# Escribir los resultados en el archivo CSV
with open(csv_file_name, mode='w', newline='', encoding='utf-8') as csv_file:
    csv_writer = csv.writer(csv_file)

    # Escribir los encabezados
    csv_writer.writerow(column_names)

    # Escribir las filas de resultados
    for fila in resultados:
        csv_writer.writerow(fila)

# Cerrar el cursor y la conexión
cursor.close()
conexion.close()

print(f'Los resultados se han guardado en el archivo {csv_file_name}')
